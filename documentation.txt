synchronous vs asynchronous:

synchronous theory in javascript: 
javascript's default behavour is synchronous javascript.javascript can run one statement at a time.

For example:
console.log("Line one");
console.log("Line two");
console.log("Line three");
Here,When run the code, "Line two" can not start before "Line one" is finished."Line three" can not start 
before "Line two" is finished.
we might heared javascript is single threaded language.

asynchronous theory in javascript:

Asynchronous controls How do we perform tasks which take time to complete for example getting data from 
database.
In asynchronous javascript,start something now and finish it later.

The traditional method javascript has available for running code asynchronously -
setTimeout() :
The setTimeout() function executes a block of code once after a specific time has elapsed.
syntax:
setTimeout(function,duration)
Example: Display a Text Once After 3 Second
// program to display a text using setTimeout method

function greet() {
    console.log('Hello world');
}

setTimeout(greet, 3000);
console.log('This message is shown first');

Output:
This message is shown first
Hello world

To remove a setTimeout method ,we can use cleartimeout() method by same function which used in setTimeout() 
function as a paramater.

setinterval()
The setinterval() function executes a block of code over and over again in regular intervals.

callback function:
a function passed to another function as an argument is referred to as a callback function. The callback 
function runs after the completion of the outer function. It is useful to develop an asynchronous JavaScript 
code. 

JavaScript Promise :
In real-life, Promises express a trust between two or more persons and ensure that a particular thing will 
surely 
happen. In javascript,Promise is a good way to handle asynchronous operations. It is used to find out if the 
asynchronous 
operation is successfully completed or not.

A promise may have one of three states.

Pending
Fulfilled
Rejected
A promise starts in a pending state. That means the process is not complete. If the operation is successful, 
the process 
ends in a fulfilled state. And, if an error occurs, the process ends in a rejected state.

For example, when you request data from the server by using a promise, it will be in a pending state. When the 
data 
arrives successfully, it will be in a fulfilled state. If an error occurs, then it will be in a rejected state.

Create a Promise
To create a promise object, we use the Promise() constructor.

let promise = new Promise(function(resolve, reject){
     //do something
});
The Promise() constructor takes a function as an argument. The function also accepts two functions resolve() 
and reject().

If the promise returns successfully, the resolve() function is called. And, if an error occurs, the reject() 
function is called.

Let's suppose that the program below is an asynchronous program. Then the program can be handled by using a 
promise.

Example 1: Program with a Promise
const count = true;

let countValue = new Promise(function (resolve, reject) {
    if (count) {
        resolve("There is a count value.");
    } else {
        reject("There is no count value");
    }
});

console.log(countValue);


The promise is resolved if the value of count is true.

Working of JavaScript promise
Working of JavaScript promise
JavaScript Promise Chaining


Promises are useful when you have to handle more than one asynchronous task, one after another. For that, 
we use promise chaining.

we can perform an operation after a promise is resolved using methods then(), catch() and finally().

JavaScript then() method
The then() method is used with the callback when the promise is successfully fulfilled or resolved.

The syntax of then() method is:

promiseObject.then(onFulfilled, onRejected);

JavaScript catch() method
The catch() method is used with the callback when the promise is rejected or if an error occurs.

JavaScript finally() method
we can also use the finally() method with promises. The finally() method gets executed when the 
promise is either resolved successfully or rejected.


JavaScript Promise Methods
There are various methods available to the Promise object.

    Method	                          Description

all(iterable)	         Waits for all promises to be resolved or any one to be rejected
allSettled(iterable)     Waits until all promises are either resolved or rejected
any(iterable)	         Returns the promise value as soon as any one of the promises is fulfilled
race(iterable)	         Wait until any of the promises is resolved or rejected
reject(reason)	         Returns a new Promise object that is rejected for the given reason
resolve(value)	         Returns a new Promise object that is resolved with the given value
catch()	                 Appends the rejection handler callback
then()	                 Appends the resolved handler callback
finally()	             Appends a handler to the promise

Javscript async/await:

We use the async keyword with a function to represent that the function is an asynchronous function. The 
async function returns a promise.

The syntax of async function is:

async function name(parameter1, parameter2, ...paramaterN) {
    // statements
}
Here,

name - name of the function
parameters - parameters that are passed to the function

The await keyword is used inside the async function to wait for the asynchronous operation.


The syntax to use await is:

let result = await promise;
The use of await pauses the async function until the promise returns a result (resolve or reject) value. 
For example,

// a promise
let promise = new Promise(function (resolve, reject) {
    setTimeout(function () {
    resolve('Promise resolved')}, 4000); 
});

// async function
async function asyncFunc() {

    // wait until the promise resolves 
    let result = await promise; 

    console.log(result);
    console.log('hello');
}

// calling the async function
asyncFunc();

API and HTTTP Request-

What is an API and How Does it Work?
An API stands for "Application Programming Interface"An Application Programming Interface (API) is a form 
of communication between two software components. It's a way for two different programs, or software 
components, to communicate with each other. APIs define the protocols and rules for how one component 
should interact with the other. For example, a web application might use an API to fetch data from a 
database, or to get the latest weather forecast from a weather service. APIs can be used in many 
programming languages, but some common formats include REST and GraphQL.


Reason Behind the HTTP Request :
The interaction between the frontend and backend of websites is made possible through HTTP requests. 
Functionalities like updating a new/old user in a database, publishing a blog post from your WordPress 
dashboard, deleting a picture from your profile, and updating your bio all require an interaction between 
a server and a client to modify data.
When building web applications — both frontend and full stack web apps — we often interact with data 
stored on different databases and servers. These servers may belong to third parties or may be created by 
the developers of a project.
To interact with these servers, we can make use of different HTTP methods to request for data. We can 
create, read, update, and delete (or CRUD) data on servers using dedicated HTTP verbs like POST, GET, 
PUT/PATCH, and DELETE.

What Is a JavaScript HTTP Request?
HTTP requests in JavaScript are a set of predefined methods used for interacting with data stored on 
servers.Every request sent to a server includes an endpoint and the type of request being sent. You can 
see an endpoint as a gateway between two programsː the client and the server.
The client is the program that sends a request while the server is the one that receives the request. 
The server sends back a response depending on the validity of the request. If the request is successful, 
the server sends back data in either XML or JSON format (JSON in most cases), and if the request fails, 
the server sends back an error message.